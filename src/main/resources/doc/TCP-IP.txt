TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。
TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。
链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。
网络层：负责路由以及把分组报文发送给目标网络或主机。
传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。
应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等
TCP/IP模型把OSI七层模型重新分为了4层（OSI 开放式系统互联通信参考模型 Open System Interconnection Reference Model）相当于简化了
TCP，UDP协议就属于传输层，表示端对端

UDP
是无连接协议，意味着发数据前不需要先建立连接。（所以也就不可靠，不关心对方正确收到数据）
发送方的UPD对应该程序交下来的报文，在添加首部后就向下交付IP层。UPD对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文
UDP不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式
头部开销小，应用层在将数据传递给传输层时，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了

TCP
面向连接，可靠的传输层通讯协议，需要3次握手
面向字节流，不保留报文边界的情况下以字节流方式进行传输
只能进行点对点的数据传输
头部开销比UDP大，因为要保证可靠传输，需要做额外处理。比如给每个包一个序号，序号保证接收方按序接受，如果包丢失了，还能让对应数据重传

websocket
websocket与http一样属于应用层协议，并且都基于TCP协议来传输数据。可以把高级协议理解为对TCP的封装。
既然大家都使用 TCP 协议，那么大家的连接和断开，都要遵循 TCP 协议中的三次握手和四次握手 ，只是在连接之后发送的内容不同，或者是断开的时间不同。
对于 WebSocket 来说，它必须依赖 HTTP 协议进行一次握手 ，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。
官方文档：
4.  Opening Handshake
4.1.  Client Requirements
   To _Establish a WebSocket Connection_, a client opens a connection
   and sends a handshake as defined in this section.  A connection is
   defined to initially be in a CONNECTING state.  A client will need to
   supply a /host/, /port/, /resource name/, and a /secure/ flag, which
   are the components of a WebSocket URI as discussed in Section 3,
   along with a list of /protocols/ and /extensions/ to be used.
   Additionally, if the client is a web browser, it supplies /origin/

socket
Socket 其实并不是一个协议。它工作在 OSI 模型会话层（第5层），是为了方便大家直接使用更底层协议（一般是 TCP 或 UDP ）而存在的一个抽象层。
最早的一套 Socket API 是 Berkeley sockets ，采用 C 语言实现。它是 Socket 的事实标准，POSIX sockets 是基于它构建的，多种编程语言都遵循这套 API，在 JAVA、Python 中都能看到这套 API 的影子。
下面摘录一段更容易理解的文字（来自 http和socket之长连接和短连接区别）：
Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。

参考url：https://www.cnblogs.com/jiangzhaowei/p/8781635.html


websock是一种协议
html5增加对这种协议的支持，可以用相应的js语法建立连接通讯
服务端可以引入spring-boot-starter-websocket包来处理
因为本质还是客户端与服务端通讯，所以也能用netty处理

