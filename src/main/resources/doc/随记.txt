JavaScript不在是只有表单验证这个功能。
浏览器的渲染引擎能够将HTML/CSS/JavaScript文本及相应的资源文件转换成图像结果。渲染引擎的主要作用是将资源文件转化为用户可见的结果。由于JavaScript本质上是解释型语言，在浏览器端解析和执行，比编译型语言慢，
V8引擎是一个JavaScript引擎实现，被谷歌收购。在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，V8将其编译成原生机器码（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。
JavaScript程序在V8引擎下的运行速度媲美二进制程序。
Google Chrome 浏览器用的就是这个引擎。V8 可以单独运行，也可以嵌入 C++ 应用当中。
相关url：https://blog.csdn.net/heyeqingquan/article/details/78839699
http://www.broadview.com.cn/article/419435

Node.js是一个Javascript运行环境(runtime environment)，实质是对Chrome V8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。 V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。
相关url：https://blog.csdn.net/w2ndong/article/details/80243652

安装nodeJs
相关url：https://www.jianshu.com/p/13f45e24b1de

相关url：http://es6.ruanyifeng.com/
https://cn.vuejs.org/v2/guide/index.html


url:https://blog.csdn.net/qing_gee/article/details/103231927

vue+springBoot项目
https://blog.csdn.net/xiaojinlai123/article/details/90694372
https://github.com/macrozheng/mall-admin-web
https://github.com/macrozheng/mall

springBoot profile
通过profile来根据环境使用对应配置
在application.yml文件里定义使用激活的profile
通过application-{profile}.yml来定义不同环境的配置
使用idea启动时，就会使用激活的配置
如果使用mvn命令打成jar包（需要配置spring-boot-maven-plugin插件），可以用命令java -jar ***.jar --spring.profiles.active=dev覆盖掉指定的激活配置（不设置就还是使用配置文件里指定的）

url:https://zhuanlan.zhihu.com/p/78104880
1.JavaConfig
可以看注解Bean的解释
执行被@Bean标注的方法都会被拦截,执行bookService()会被拦截，里面调用dependencyService()也会被拦截
在第一次执行bookService()里的dependencyService()方法时，被拦截，查看ioc容器里是否有IDependencyService的实例，没有则构造出来
到执行userservice()里的dependencyService()方法时，被拦截，容器里已经有该实例了，则不构建直接拿出来用
所以IBookService和IUserservice实例里的IDependencyService实例都是同一个

2.@ComponentScan
@ComponentScan注解对应XML配置形式中的 <context:component-scan>元素，表示启用组件扫描，Spring会自动扫描所有通过注解配置的bean，然后将其注册到IOC容器中。
我们可以通过 basePackages等属性来指定 @ComponentScan自动扫描的范围，如果不指定，默认从声明 @ComponentScan所在类的 package进行扫描。正因为如此，SpringBoot的启动类都默认在 src/main/java下。

3.@Import
@Import注解用于导入配置类

4.@Conditional
@Conditional注解表示在满足某种条件后才初始化一个bean或者启用某些配置。它一般用在由 @Component、 @Service、 @Configuration等注解标识的类上面，或者由 @Bean标记的方法上。
如果一个 @Configuration类标记了 @Conditional，则该类中所有标识了 @Bean的方法和 @Import注解导入的相关类将遵从这些条件。

5.@ConfigurationProperties和@EnableConfigurationProperties
@ConfigurationProperties注解和@Value作用一样都是用来获取配置的值
@Value是要把properties文件里的key写全的
@ConfigurationProperties只要写key的前缀，然后类的属性名要对应key的最后一段字符
@EnableConfigurationProperties注解表示对 @ConfigurationProperties的内嵌支持，默认会将对应Properties Class作为bean注入的IOC容器中，即在相应的Properties类上不用加 @Component注解。

spring boot号称会自动配置第三方jar包（通俗讲就是根据应用的依赖、自定义的bean、classpath下有没有某个类 等等因素来猜测你需要的bean，然后注册到IOC容器中）。
原因在于：首先读取org.springframework.boot.autoconfigure下的META-INF/spring.factories文件，key为EnableAutoConfiguration，value为要注册的类，
在注册的类上用@ConditionalOnClass注解标注，表示当有XXX.class时才注册进ioc容器。

jpa url:https://zhuanlan.zhihu.com/p/108016975?from_voters_page=true

druid
url:https://blog.csdn.net/u011490595/article/details/82050344

AOP
url:https://liweidan.cn/java/frame/spring-source/2019/12/15/431/#AdvisorBean

MongoDB
安装url：https://blog.csdn.net/qq_27378621/article/details/80933354
https://www.cnblogs.com/dreamsqin/p/10885038.html
https://www.runoob.com/mongodb/mongodb-window-install.html

1.安装
在安装过程中有选项是否要mongodb作为系统服务启动。
如果选择了需要，在安装完成后在服务中选择属性，可以在可执行文件路径中看到起服务命令，如：XXX\MongoDB\Server\4.2\bin\mongod.exe --config "C:\Application\MongoDB\Server\4.2\bin\mongod.cfg" --service
有默认的配置文件mongod.cfg，里面的dbPath，log的path都配好了默认地址。
也可以自己制定配置文件，存数据的路径

2.概念
MongoDB采用Bson格式存储，BSON格式比JSON数据类型更加丰富，
支持ObjectId、日期类型、正则表达式、JS代码、二进制数据等
查看函数方法的实现或者查看方法的定义（比如忘记函数的参数了）可以通过输入函数名，不带小括号

3.mongo数据库操作需要使用mongo命令先连接
    （1）show dbs 查看数据库 如果数据库内容为空则不会显示
    （2）use <databaseName> 切换指定数据库 如果数据库存在，则切换到这个数据库；如果数据库不存在，则创建该数据库。如果创建了一个新库然后什么都不操作，这个库会被系统删除
    （3）db 查看当前库
    （4）db.status() 查看当前库的状态
    （5）db.dropDatabase() 删除当前所在库

4.文档（Document）
文档是一组键值（key-value）对（即BSON），相当于RDBMS（关系数据库管理系统：Relational Database Management System)中的一行数据。
MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型
插入文档 db.COLLECTION_NAME.insert(document)或db.COLLECTION_NAME.save(document)
        db.collection.insertOne()
        db.collection.insertMany()
        如果 _id 主键存在则更新数据,此时推荐使用db.collection.insertOne() 或 db.collection.replaceOne()
查看文档 db.COLLECTION_NAME.find()
更新文档 db.collection.update()
删除文档 db.collection.remove()
查询文档 db.collection.find()
        如果你需要以易读的方式来读取数据，可以使用 pretty()方法

5.集合
集合就是 MongoDB 文档组，类似于RDBMS中的表格。
集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据。
创建集合 db.createCollection(name, options)
    name:要创建的集合名称
    options:可选参数，指定有关内存大小及索引的选项
*当插入文档时，集合也会被自动创建
查看集合 show collections或show tables
删除集合 db.COLLECTION_NAME.drop()

capped collections
固定大小的集合，是高性能自动的维护对象的插入顺序。非常适合记录日志，必须要显式的创建一个capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。(因此更新数据时，不能额外增加空间)
Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的。
命令如：db.createCollection("mycoll", {capped:true, size:100000})

6.元数据
命令如：dbname.system.*
包含多种系统信息的特殊集合

7.ObjectId
ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：
前 4 个字节表示创建 unix 时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时
接下来的 3 个字节是机器标识码
紧接的两个字节由进程 id 组成 PID
最后三个字节是随机数

因为ObjectId中保存了创建的时间戳，可以通过getTimestamp()函数来获取文档的创建时间

MongoDB复制与分片

MongoDB复制（副本集）
MongoDB复制是将数据同步在多个服务器的过程
复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性，并可以保证数据的安全性。
复制还允许您从硬件故障和服务中断中恢复数据。
mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。
mongodb各个节点常见的搭配方式为：一主一从、一主多从。
主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。
默认会创建local，admin数据库，local数据库主要存储副本集的元数据，admin数据库则主要存储MongoDB的用户、角色等信息。
local数据库
从名字可以看出，它只会在本地存储数据，即local数据库里的内容不会同步到副本集里其他节点上去；目前local数据库主要存储副本集的配置信息、oplog信息，这些信息是每个Mongod进程独有的，不需要同步到副本集种其他节点。
admin数据库
当Mongod启用auth选项时，用户需要创建数据库帐号，访问时根据帐号信息来鉴权，而数据库帐号信息就存储在admin数据库下。
强烈建议不要使用admin数据库存储应用业务数据
admin数据库里的system.users、system.roles2个集合的数据，MongoDB会cache在内存里，这样不用每次鉴权都从磁盘加载用户角色信息。

Mongodb用户验证登陆
简历账号参考url：
https://www.cnblogs.com/phoenix1630/p/10725160.html
https://cloud.tencent.com/developer/article/1446551
java与Mongodb连接参考url：
https://blog.csdn.net/qq_36760753/article/details/81149077
启动具有访问控制权限的MongoDB实例
启动命令里加--auth 或者在配置文件里配置authorization: "enabled"

spring boot与mongodb
https://blog.csdn.net/stronglyh/article/details/81024588


@ConditionalOnProperty(name = "com.arh.propertyBeanWithAnnoValue.enable", havingValue = "true", matchIfMissing = false)
根据配置文件来判断是否加载类，一般用作filter，schedule
@PropertySource
指定使用的资源文件，value是个数组
如@PropertySource({"classpath:XXX/config.properties","classpath:XXX/config_${anotherfile.configinject}.properties"})
引入外部配置文件组：${anotherfile.configinject}的值来自config.properties
如果application.yml和其他资源文件有相同的key，就算你不指定application.yml，也会从application.yml取值




